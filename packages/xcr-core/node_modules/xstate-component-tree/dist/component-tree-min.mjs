/*! xstate-component-tree@3.0.0 !*/
const t=async({item:t,load:s,context:e,event:n})=>{const i=await s(e,n);if(Array.isArray(i)){const[s,e]=await Promise.all(i);t.t=s,t.s=e}else t.t=i},s=async({i:t,root:s})=>{const{o:e}=t,n=await e;s.children.push(...n)};class ComponentTree{constructor(t,s,{h:e=!0}=!1){this.l=t,this._=s,this.p=e,this.id=t.id,this.u=0,this.m=new Map,this.v=new Map,this.M=new Map,this.g=new Map,this.o=!1,this.$=!1,this.j(),this.k()}teardown(){this.v.clear(),this.M.clear(),this.g.clear(),this.m.clear(),this.o=null,this.$=null,this.options=null,this.C()}j(){const{v:t,M:s,l:e,p:n}=this,{O:i}=e.P;for(const e in i){const{path:o,T:c=!1,A:h}=i[e],r=o.join(".");c&&t.set(r,{__proto__:null,h:n,...c}),h.forEach(({id:t})=>s.set(r,t))}}k(){const{l:t}=this,{unsubscribe:s}=t.subscribe(t=>this.q(t));this.C=s}async B(){const{v:e,M:n,g:i,m:o,u:c,$:{value:h,context:r,event:a}}=this,l=[],_={__proto__:null,id:this.id,children:[]};let p;for(p="string"==typeof h?[[_,h,!1]]:Object.keys(h).map(t=>[_,t,h[t]]);p.length&&c===this.u;){const[c,h,_]=p.shift();let u=c;if(e.has(h)){const s=e.get(h);let n=!1;o.has(h)&&(n=o.get(h),n.D===this.u-1?n.D=this.u:(n=!1,o.delete(h)));const{t:i=!1,s:_=!1,load:p}=s,d={__proto__:null,t:n?n.item.t:i,s:n?n.item.s:_,children:[]};if(p&&!n.loaded){const s=t({item:d,load:p,context:r,event:a});s.then(()=>{const t=o.get(h);t&&(t.loaded=!0)}),l.push(s)}s.h&&!n&&o.set(h,{__proto__:null,item:d,D:this.u,loaded:!1}),c.children.push(d),u=d}if(n.has(h)){const t=n.get(h);i.has(t)&&l.push(s({i:i.get(t),root:u}))}_&&("string"!=typeof _?p.push(...Object.keys(_).map(t=>[u,`${h}.${t}`,_[t]])):p.push([u,`${h}.${_}`,!1]))}return await Promise.all(l),_.children}async F(){const{g:t,_:s}=this,e=++this.u;this.o=this.B();const[n]=await Promise.all([this.o,[...t.values()].map(({o:t})=>t)]);e===this.u&&s(n,{data:this.$})}q(t){const{G:s,children:e}=t;if(!1===s)return!1;this.$={__proto__:null,value:t.value,event:t.event,context:t.context};const{g:n}=this;return n.forEach((t,s)=>{s in e||(t.teardown(),t=null,n.delete(s))}),Object.keys(e).forEach(t=>{if(n.has(t))return;const s=e[t];s.H&&s.state&&n.set(t,new ComponentTree(s,()=>this.F()))}),this.F()}}export default ComponentTree;
//# sourceMappingURL=component-tree-min.mjs.map
